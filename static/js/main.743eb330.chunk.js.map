{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["fontSize","hoverColor","Container","styled","div","InnerContainer","CurrencySelect","select","Option","option","Swapper","button","ValueSelect","ValueInput","input","CurrencySymbol","CurrencySelecter","value","currency","setOtherValue","setCurrency","currencyData","currencySelectOrder","currencySymbol","onChange","e","target","map","index","currencyID","currencyName","App","useState","setCurrencyData","currencyOrder","setCurrencyOrder","sourceCurrency","setSourceCurrency","targetCurrency","setTargetCurrency","sourceValue","setSourceValue","targetValue","setTargetValue","exchangeRate","setExchangeRate","errorMessage","setErrorMessage","fetchCurrencies","a","fetch","result","ok","json","results","orderCurrencySelectOrder","data","orderByCurrencyID","Object","keys","sort","updateExchangeRate","useEffect","newExchangeRate","className","onClick","oldSourceCurrency","swapCurrencies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.743eb330.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport styled  from 'styled-components';\nimport createGlobalStyle from 'styled-components'\nimport { useState, useEffect } from 'react'\n\n//#region styles \n\nconst fontSize = \"18px\"\nconst hoverColor = \"white\"\n\nconst Container = styled.div`\n  margin: 1em auto;\n  background-color: #81f479;\n  border-radius: 0.125em;\n  padding: 0.5em;\n  box-shadow: 0.25em 0.25em 20px black;\n  display: flex;\n  align-items: center;\n\n  @media (max-width: 930px) {\n    flex-direction: column;\n  }\n`;\n\nconst InnerContainer = styled.div`\n  background-color: lightsteelblue;\n  display: flex;\n  flex-direction: column;\n  height: 4em;\n  \n\n`;\n\nconst CurrencySelect = styled.select`\n  height: 4em;\n  background-color: #41a83f;\n  width: 100%;\n  border: none;\n  font-size: ${fontSize};\n  padding: 0.25em 0.5em;\n  :hover {\n    color: ${hoverColor}\n  }\n`;\n\nconst Option = styled.option`\n  background-color: lightblue;\n`;\n\nconst Swapper = styled.button`\n  background-color: transparent;\n  margin: .25em .25em;\n  height: 100%;\n  border: none;\n  font-size: 60px;\n  line-height: 60px;\n  font-weight: 900;\n  :hover {\n    color: ${hoverColor}\n  }\n  ::after {\n    content: ' ⮂ '\n  }\n\n  @media (max-width: 930px) {\n    ::after {\n      content: \"⮃\";\n    }\n  }\n`;\n\nconst ValueSelect = styled.div`\n  height: 4em;\n  background-color: #6ac43d;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  \n`;\n\nconst ValueInput = styled.input`\n  background-color: transparent;\n    border: none;\n    font-size: ${fontSize};\n    padding: 0.25em 0.5em;\n    outline: none;\n`;\n\nconst CurrencySymbol = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.2);\n  font-size: ${fontSize};\n  height: 100%;\n  color: black;\n  min-width: 3em;\n`;\n\n\n//#endregion\n\n\nconst CurrencySelecter = ( { value, currency, setOtherValue, setCurrency, currencyData, currencySelectOrder } ) => {\n\n  const currencySymbol = currencyData[currency] && currencyData[currency][\"currencySymbol\"] || currency;\n \n  return (\n  <InnerContainer> \n  <CurrencySelect\n    value={currency} onChange = {(e) => setCurrency(e.target.value)}> \n\n    {\n      currencySelectOrder && currencySelectOrder.map((currency, index) => {\n      const currencyID = currency; \n      const currencyName = currencyData[currency][\"currencyName\"];\n      return <Option key = {index} value={currencyID}>{currencyName} - {currencyID}</Option>\n    }) \n    }\n  </CurrencySelect> \n  \n  <ValueSelect> \n    <ValueInput value = {value} onChange = {(e) => setOtherValue(e.target.value)}></ValueInput>\n    <CurrencySymbol>\n      {currencySymbol ? currencySymbol : currency ? currency : \"HMM\"}</CurrencySymbol>\n  </ValueSelect>\n  \n  </InnerContainer>\n\n  )\n\n}\n\n\n\n\nfunction App() {  \n\n  const [currencyData, setCurrencyData] = useState(\"N/A\")\n  const [currencyOrder, setCurrencyOrder] = useState()\n\n  const [sourceCurrency, setSourceCurrency] = useState(\"N/A\") \n  const [targetCurrency, setTargetCurrency] = useState(\"N/A\") \n  const [sourceValue, setSourceValue] = useState(1)\n  const [targetValue, setTargetValue] = useState(\"N/A\")\n\n  const [exchangeRate, setExchangeRate] = useState(2);\n\n  const [errorMessage, setErrorMessage] = useState()\n\n  const fetchCurrencies = async () => {\n\n    const result = await fetch(`https://free.currconv.com/api/v7/currencies?&apiKey=87b4f9fb2be631bed0c8`);\n\n\n    if (result) {\n      if (!result.ok) {\n        setErrorMessage(\"Something went wrong with fetching from the API, likely due to free-limit reached. Try again in 30 minutes.\")\n        return;\n      }\n      setErrorMessage(\"API fetch successful. This site uses a free API and has a limit of calls per hour, which may break down if you change currencies too frequently.\")\n      const json = await result.json();\n      setCurrencyData(json.results);\n      //Do some ordering here maybe? another function creating an array of just the ID, in prefered order?\n      orderCurrencySelectOrder(json.results);\n    }\n    \n  }\n\n  const orderCurrencySelectOrder = (data) => {\n    //Orders by CurrencyID\n    const orderByCurrencyID = Object.keys(data).sort();\n    setCurrencyOrder(orderByCurrencyID);\n    setSourceCurrency(orderByCurrencyID[0])\n    setTargetCurrency(orderByCurrencyID[1])\n    updateExchangeRate();\n    \n  }\n\n\n  useEffect(() => {\n    fetchCurrencies();\n  }, [])\n\n\n  const updateFromSource = (value) => {\n    setSourceValue(value);\n    setTargetValue(value*exchangeRate); \n  }\n \n  const updateFromTarget = (value) => {\n    setTargetValue(value);\n    setSourceValue(value/exchangeRate); \n  }\n\n  const updateExchangeRate = async () => {\n\n    const result = await fetch(`https://free.currconv.com/api/v7/convert?q=${sourceCurrency}_${targetCurrency}&compact=ultra&apiKey=87b4f9fb2be631bed0c8`)\n\n    if (result) {\n      if (!result.ok) {\n        setErrorMessage(\"Something went wrong with fetching from the API, likely due to free-limit reached. Try again in 30 minutes.\")\n        return;\n      }\n      setErrorMessage(\"API fetch successful. This site uses a free API to get currency rates and has a limit of calls per hour, which may break down if you change currencies too frequently.\")\n      const json = await result.json();\n\n      const newExchangeRate = json[`${sourceCurrency}_${targetCurrency}`]\n    \n      setExchangeRate(newExchangeRate);\n      setTargetValue(sourceValue*newExchangeRate)\n    }\n  }\n\n  useEffect(() => {\n    updateExchangeRate();\n    setTargetValue(sourceValue*exchangeRate);\n  }, [sourceCurrency, targetCurrency])\n\n  const swapCurrencies = () => {\n    const oldSourceCurrency = sourceCurrency;\n    setSourceCurrency(targetCurrency);\n    setTargetCurrency(oldSourceCurrency);\n  }\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Currency Exchanger</h2>\n\n        <Container> \n          <CurrencySelecter\n            value={sourceValue}\n            currency={sourceCurrency}\n            setOtherValue={(e) => updateFromSource(e)}\n            setCurrency={(e) => setSourceCurrency(e)}\n            currencyData = {currencyData}\n            currencySelectOrder = {currencyOrder}\n          /> \n\n          <Swapper onClick = {(e) => swapCurrencies()}/>\n\n          <CurrencySelecter\n            value={targetValue}\n            currency={targetCurrency}\n            setOtherValue={(e) => updateFromTarget(e)}\n            setCurrency={(e) => setTargetCurrency(e)}\n            currencyData = {currencyData}\n            currencySelectOrder = {currencyOrder}\n          />\n\n        </Container>\n        <h6>{errorMessage}</h6>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}